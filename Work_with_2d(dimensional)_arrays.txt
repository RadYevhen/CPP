#include <iostream>
#include <fstream>

using namespace std;

int* readFile()
{
	int firstNumber, secondNumber;

	// Read from file and work with data
	ifstream inFile;
	inFile.open("C:\\Users\\ray8wz\\Documents\\Visual Studio 2015\\Projects\\HelloWorld\\sum.in.txt");
	if (!inFile)
	{
		cerr << "Error during reading file!";
		exit(1);
	}

	inFile >> firstNumber >> secondNumber;

	inFile.close();

	int arr[2] = {firstNumber, secondNumber};
	
	return (int*)arr;
}

void writeFile(int* _arr[], int _n, int _m)
{

	ofstream outFile;
	outFile.open("C:\\Users\\ray8wz\\Documents\\Visual Studio 2015\\Projects\\HelloWorld\\sum.out.txt");
	if (!outFile)
	{
		cerr << "Error during writing to file!";
		exit(1);
	}

	outFile.clear();
	for (int i = 0; i < _n; i++)
	{
		for (int j = 0; j < _m; j++)
		{
			outFile << _arr[i][j] << '\t';
		}
		outFile << endl;
	}
	outFile.close();
}

int main()
{
	// Read from file
	int* a = readFile();

	int n = a[0];
    int m = a[1];

	//pointer to pointer
	int** arr;
	
	//Memory allocation for array with pointers
	arr = new int*[n];

	// FASTER APPROACH: Allocate all needed memory for A[0](like for line array) and then for each pointer create link to array with numbers
	arr[0] = new int[n*m];
	for (int i = 1; i < n; i++) // start from 1 because for 0 element we already have link and don't need to overwrite
	{
		arr[i] = arr[0] + m*i;
	}
	////LONGER APPROACH: For each pointer in array with pointers allocate memory for array with numbers(length m)
	//for (int i = 0; i < n; i++)
	//{
	//	arr[i] = new int[m];
	//}

	// Fill in array with values
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			arr[i][j] = i * m + j; // i - index in array with pointers, j - index in array with values for i
		}
	}

	// Write data to file
	writeFile(arr, n, m);

	// FASTER APPROACH: Clear memory
	delete[] arr[0];
	delete[] arr;
	//// LONGER APPROACH: Clear memory
	//for (int i = 0; i < n; i++)
	//{
	//	delete[] arr[i];
	//}
	//delete[] arr;

	cout << "Done" << endl;
	system("pause");
	return 0;
}