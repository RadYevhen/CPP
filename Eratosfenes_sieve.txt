/* Classical task for array
Eratosfenes sieve(Решето Эратосфена)
Found all Prime numbers(простые числа).(Prime number - number > 0 that has exactly 2 dividers 1 and itself)
Have to be interval with max value otherwise we will receive infinity loop
[2...30]
2, 3, 4, ... ,30
1. Take first active number and tell that this is prime number(can be devided to itself and 1)
Ex - 2
2. Deactive all next numbers that started from number^2 and each next number that +serial number of our prime number
Ex - 2^2 = 4. Deactive 4 and each next 2 numbers - 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30.
3. Take next active number and do step #2(check that max > number^2 otherwise not make sence). Do it until max > number^2
Ex - 3^2 = 6. 30>6 => Deactivate 6 and eaxh next 3 numbers - 9, 12, 15, 18, 21, 24, 27, 30.
Ex - 4 already deacticated in step 2, go to 5. 5^2 = 25. 30 > 25 => Deactivate 25 and each next 5 numbers - 30
Ex - 6 already deactivated. Go to 7. 7^2 = 49. 30 < 49 => stop
4. Take all active numbers from the list. They will be Prime numbers
Ex - 2, 3, 5, 7, 11, 13, 17, 19, 23, 29.
*/
#include <iostream>
#include <fstream> // library for read/write files

using namespace std;

int main()
{
	// Read from file and work with data
	ifstream inFile;
	inFile.open("C:\\Users\\ray8wz\\Documents\\Visual Studio 2015\\Projects\\HelloWorld\\sum.in.txt");
	if (!inFile)
	{
		cerr << "Error during reading file!";
		exit(1);
	}

	int a;
	inFile >> a;
	inFile.close();

	// Eratosfenes sieve
	// 1. Fill in array with boolean values - true (activate)
	bool* arr = new bool[a+1]; // create array with length from file+1 because it started from 0. If 30 in file, 31 elements in array.
	for (int i = 2; i < a+1; i++)
	{
		arr[i] = true;
	}

	// 2. Deactivate not prime numbers
	for (int i = 2; i <= a; i++)
	{
		if (i*i > a)
		{
			break;
		}
		if (arr[i] == true)
		{
			for (int j = i*i; j <= a; j += i)
			{
				if (arr[j] == true)
				{
					arr[j] = false;
				}
			}
		}
	}

	// Write data to file
	ofstream outFile;
	outFile.open("C:\\Users\\ray8wz\\Documents\\Visual Studio 2015\\Projects\\HelloWorld\\sum.out.txt");
	if (!outFile)
	{
		cerr << "Error during writing to file!";
		exit(1);
	}

	outFile.clear();
	// Put in file only active(true) indexes(numbers) of array
	for (int i = 2; i <= a; i++)
	{
		if (arr[i] == true)
		{
			outFile << i << endl;
		}
	}
	outFile.close();

	cout << "Done" << endl;
	system("pause");
	return 0;
}