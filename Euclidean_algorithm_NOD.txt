/*
Алгоритм Евклида – это алгоритм нахождения наибольшего общего делителя (НОД) пары целых чисел.

Наибольший общий делитель (НОД) – это число, которое делит без остатка два числа и делится само без остатка на любой другой делитель данных двух чисел. Проще говоря, это самое большое число, на которое можно без остатка разделить два числа, для которых ищется НОД.

Алгоритм нахождения НОД делением
Большее число делим на меньшее.
Если делится без остатка, то меньшее число и есть НОД (следует выйти из цикла).
Если есть остаток, то большее число заменяем на остаток от деления.
Переходим к пункту 1.
Пример:
Найти НОД для 30 и 18.
30 / 18 = 1 (остаток 12)
18 / 12 = 1 (остаток 6)
12 / 6 = 2 (остаток 0)
Конец: НОД – это делитель 6.
НОД (30, 18) = 6

Алгоритм нахождения НОД вычитанием
Из большего числа вычитаем меньшее.
Если получается 0, то значит, что числа равны друг другу и являются НОД (следует выйти из цикла).
Если результат вычитания не равен 0, то большее число заменяем на результат вычитания.
Переходим к пункту 1.
Пример:
Найти НОД для 30 и 18.
30 - 18 = 12
18 - 12 = 6
12 - 6 = 6
6 - 6 = 0
Конец: НОД – это уменьшаемое или вычитаемое.
НОД (30, 18) = 6
*/
#include <iostream>
#include <fstream> // library for read/write files
 
using namespace std;
 
int main()
{
	// Solution #1
	long long a, b, c;
 
	// Read from file and work with data
	ifstream inFile;
	inFile.open("gcd.in");
	if (!inFile)
	{
		cerr << "Error during reading file!";
		exit(1);
	}
 
	inFile >> a >> b;
	inFile.close();
	
	// Division algorithm
	while ( a != 0 && b != 0 )
	{
		if (a > b)
		{
			a %= b;
		}
		else
		{
			b %= a;
		}
	}
 
	c = a + b;
	
	// Subtraction algorithm
	/*
	while ( a != b )
	{
		if (a > b)
		{
			a -= b;
		}
		else
		{
			b -= a;
		}
	}
 
	c = a;
	*/
	// Write data to file
	ofstream outFile;
	outFile.open("gcd.out");
	if (!outFile)
	{
		cerr << "Error during writing to file!";
		exit(1);
	}
 
	outFile.clear();
	outFile << c;
	outFile.close();
 
	return 0;
}




