/*
In worst case,each element is compared with all the other elements in the sorted array. For N elements, there will be N2 comparisons. Therefore, the time complexity is O(N^2)

Start from 1 element and continue for all other in the array: compare current with previous. If current less than previuos - swap
*/
#include <iostream>

using namespace std;

int main()
{
	int N = 10;
	int arr[] = {2, 7, 3, 9, 1, 44, 15, 13, 42, 2};

	// Output array
	for (int i = 0; i < N; i++)
	{
		cout << arr[i] << '\t';
	}
	cout << endl;

	// Sort array with Insert sort
	for (int pos = 1; pos < N; pos++)
	{
		for (int i = pos; i > 0; i--)
		{
			if (arr[i] < arr[i-1])
			{
				int tepm = arr[i];
				arr[i] = arr[i-1];
				arr[i-1] = tepm;
			}
		}
	}

	// Output sorted array
	for (int i = 0; i < N; i++)
	{
		cout << arr[i] << '\t';
	}
	cout << endl;

	system("pause");
    return 0;
}
